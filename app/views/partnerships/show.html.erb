<div class="whole-page">
  <div class="banner">
    <div class="banner__row">
      <div class="banner__content">
        <h2>Hello, <%= @user.username %>!</h2>
        <% if checkin = current_user.checkin_today(@partnership) %>
          <p>Thanks for checking in today!</p>
        <% else %>
          <p>How's your mood today?</p>
        <% end %>
      </div>
      <div class="dropdown">
        <button class="dropdown-toggle avatar-container" data-bs-toggle="dropdown" aria-expanded="false" type="button">
          <%= image_tag "#{@user.username}.png", class: "banner__avatar", alt: "User One" %>
        </button>
        <ul class="dropdown-menu">
          <li>
            <%= link_to "Profile",
              edit_user_registration_path,
              class: "btn btn-secondary w-100 dropdown-item" %>
          </li>
          <li>
            <%= link_to "Log out",
              destroy_user_session_path,
              class: "btn btn-secondary w-100 dropdown-item",
              data: { turbo_method: :delete } %>
          </li>
        </ul>
      </div>
    </div>
    <% if checkin = current_user.checkin_today(@partnership) %>
      <%= link_to checkin_path(checkin), class: "btn banner__cta" do %>
        View your check-in
      <% end %>
    <% else %>
      <%= link_to new_partnership_checkin_path(@user.current_partnership), class: "btn banner__cta" do %>
        Mood Check-in
      <% end %>
    <% end %>
  </div>

  <%= render "health_banner", status: @partnership.health_status_for(@user) %>

  <div class="bulma header" style="margin-top:16px">
    <h2>Mood Check-in Log</h2>
  </div>
  <div class="checkin-toolbar" style="display:flex;align-items:center;gap:8px;margin:8px 0 12px;padding-left:16px;">
    <select id="checkin-who" class="form-select" style="max-width: 180px;">
      <option value="partner" selected><%= @user.current_partner.username %></option>
      <option value="me">Me</option>
    </select>
    <select id="checkin-sort" class="form-select" style="max-width: 200px;">
      <option value="newest" selected>Newest</option>
      <option value="oldest">Oldest</option>
      <option value="unread">Unread</option>
      <option value="read">Read</option>
    </select>
  </div>
  <% partner_scope = @user.current_partner.checkins %>
  <% read_ids = CheckinRead.where(user_id: current_user.id, checkin_id: partner_scope.select(:id)).pluck(:checkin_id) %>
  <div class="mood-list" id="partner-checkins">
    <% partner_scope.order(created_at: :desc).each do |checkin| %>
      <%= render "checkins/card",
          checkin: checkin,
          read:    read_ids.include?(checkin.id) %>
    <% end %>
  </div>
  <% my_scope = @user.checkins %>
  <div class="mood-list" id="my-checkins" style="display:none">
    <% my_scope.order(created_at: :desc).each do |checkin| %>
      <%= render "checkins/card",
          checkin: checkin,
          read:    true %>
    <% end %>
  </div>
</div>
</div>
<script>
  (function () {
    const sortSelect = document.getElementById('checkin-sort');
    const whoSelect  = document.getElementById('checkin-who');
    const partnerBox = document.getElementById('partner-checkins');
    const mineBox    = document.getElementById('my-checkins');

    if (!sortSelect || !whoSelect || !partnerBox || !mineBox) return;

    function currentListEl() {
      return (whoSelect.value === 'me') ? mineBox : partnerBox;
    }

    function sortAndFilter() {

      const showingMine = (whoSelect.value === 'me');
      mineBox.style.display    = showingMine ? '' : 'none';
      partnerBox.style.display = showingMine ? 'none' : '';

      const list  = currentListEl();
      const value = sortSelect.value;
      const items = Array.from(list.children);

      items.forEach(el => el.style.display = '');

      const byTimeDesc = (a, b) => (+b.dataset.createdAt) - (+a.dataset.createdAt);
      const byTimeAsc  = (a, b) => (+a.dataset.createdAt) - (+b.dataset.createdAt);
      const unreadFirst = (a, b) => {
        const ua = (a.dataset.read === 'false') ? 0 : 1;
        const ub = (b.dataset.read === 'false') ? 0 : 1;
        return ua - ub || byTimeDesc(a, b);
      };
      const readFirst = (a, b) => {
        const ra = (a.dataset.read === 'true') ? 0 : 1;
        const rb = (b.dataset.read === 'true') ? 0 : 1;
        return ra - rb || byTimeDesc(a, b);
      };

      let sorter = byTimeDesc;
      if (value === 'oldest') sorter = byTimeAsc;
      if (value === 'unread') sorter = unreadFirst;
      if (value === 'read')   sorter = readFirst;

      items.sort(sorter).forEach(el => list.appendChild(el));
    }

    sortSelect.addEventListener('change', sortAndFilter);
    whoSelect.addEventListener('change', sortAndFilter);

    sortAndFilter();
    document.addEventListener("turbo:after-stream-render", () => {
      sortAndFilter();
    });
  })();
</script>
