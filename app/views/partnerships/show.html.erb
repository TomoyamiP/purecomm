<div class="whole-page">
  <div class="banner">
    <div class="banner__row">
      <div class="banner__content">
        <h2>Hello, <%= @user.username %>!</h2>
        <% if checkin = current_user.checkin_today(@partnership) %>
          <p>Thanks for checking in today!</p>
        <% else %>
          <p>How's your mood today?</p>
        <% end %>
      </div>
      <div class="dropdown">
        <button class="dropdown-toggle avatar-container" data-bs-toggle="dropdown" aria-expanded="false" type="button">
          <%= image_tag "#{@user.username}.png", class: "banner__avatar", alt: "User One" %>
        </button>
        <ul class="dropdown-menu">
          <li>
            <%= link_to "Profile",
              edit_user_registration_path,
              class: "btn btn-secondary w-100 dropdown-item" %>
          </li>
          <li>
            <%= link_to "Log out",
              destroy_user_session_path,
              class: "btn btn-secondary w-100 dropdown-item",
              data: { turbo_method: :delete } %>
          </li>
        </ul>
      </div>
    </div>
    <% if checkin = current_user.checkin_today(@partnership) %>
      <%= link_to checkin_path(checkin), class: "btn banner__cta" do %>
        View your check-in
      <% end %>
    <% else %>
      <%= link_to new_partnership_checkin_path(@user.current_partnership), class: "btn banner__cta" do %>
        Mood Check-in
      <% end %>
    <% end %>
  </div>
  <div class="card mood-log" id="mood-log-card" style="margin-top:16px">
    <div class="mood-log__header">
      <h3 id="mood-log-title">Your Daily Mood Log</h3>
      <button type="button" id="toggle-mood-log" class="btn btn-secondary">
        Show Partner
      </button>
    </div>
    <div class="mood-log__row" id="mine-row">
      <% @user.checkins.order(created_at: :desc).limit(6).reverse.each do |checkin| %>
        <div class="mood-log__cell">
          <%= inline_svg_tag "icons/#{checkin.mood.downcase}-icon.svg", class: "mood-icon" %>
          <div class="mood-log__label"><%= weekday_mixed_abbr(checkin.created_at) %></div>
        </div>
      <% end %>
    </div>
    <div class="mood-log__row" id="partner-row" style="display:none">
      <% @user.current_partner.checkins.order(created_at: :desc).limit(6).reverse.each do |checkin| %>
        <div class="mood-log__cell">
          <%= inline_svg_tag "icons/#{checkin.mood.downcase}-icon.svg", class: "mood-icon" %>
          <div class="mood-log__label"><%= weekday_mixed_abbr(checkin.created_at) %></div>
        </div>
      <% end %>
    </div>
  </div>
  <script>
    (function () {
      const card = document.getElementById('mood-log-card');
      if (!card) return;

      const btn = card.querySelector('#toggle-mood-log');
      const title = card.querySelector('#mood-log-title');
      const mine = card.querySelector('#mine-row');
      const partner = card.querySelector('#partner-row');

      btn.addEventListener('click', () => {
        const showingMine = mine.style.display !== 'none';

        if (showingMine) {

          mine.style.display = 'none';
          partner.style.display = '';
          title.textContent = "<%= @user.current_partner.username %>'s Daily Mood Log";
          btn.textContent = 'Show Me';
        } else {

          partner.style.display = 'none';
          mine.style.display = '';
          title.textContent = "Your Daily Mood Log";
          btn.textContent = 'Show Partner';
        }
      });
    })();
  </script>
  <div class="two-buttons d-flex justify-content-between">
    <%= link_to "Harmony Coach", partnership_messages_path(@partnership), class:"btn btn-coach w-full", style: "margin-right:8px" %>
    <%= link_to "Grievance Drop", new_partnership_grievance_path(@partnership), class:"btn btn-grievance w-full", style: "margin-left:8px" %>
  </div>
  <div class="bulma header" style="margin-top:16px">
    <h2><%= @user.current_partner.username %>'s Mood Check-in</h2>
  </div>
  <div class="checkin-toolbar" style="display:flex;align-items:center;gap:8px;margin:8px 0 12px;padding-left:16px;">
    <select id="checkin-sort" class="form-select" style="max-width: 200px;">
      <option value="newest" selected>Newest</option>
      <option value="oldest">Oldest</option>
      <option value="unread">Unread</option>
      <option value="read">Read</option>
    </select>
  </div>
  <% if current_user&.current_partnership.present? %>
    <%= turbo_stream_from [:checkins_list, @user.current_partnership.id, current_user.id] %>
  <% end %>
  <div class="mood-list" id="partner-checkins">
    <% viewed = session[:viewed_checkins] || [] %>
    <% @user.current_partner.checkins.order(created_at: :desc).each do |checkin| %>
      <%= render "checkins/card", checkin:, read: viewed.include?(checkin.id) %>
    <% end %>
  </div>
</div>
</div>
<script>
  (function () {
    const select = document.getElementById('checkin-sort');
    const list   = document.getElementById('partner-checkins');
    if (!select || !list) return;

    function sortAndFilter() {
      const value = select.value;
      const items = Array.from(list.children);


      items.forEach(el => el.style.display = '');


      let visible = items;
      if (value === 'unread_only') {
        visible = items.filter(el => el.dataset.read === 'false');

        items.forEach(el => {
          if (el.dataset.read !== 'false') el.style.display = 'none';
        });
      }


      const byTimeDesc = (a, b) => (+b.dataset.createdAt) - (+a.dataset.createdAt);
      const byTimeAsc  = (a, b) => (+a.dataset.createdAt) - (+b.dataset.createdAt);
      const unreadFirst = (a, b) => {
        const ua = (a.dataset.read === 'false') ? 0 : 1;
        const ub = (b.dataset.read === 'false') ? 0 : 1;
        return ua - ub || byTimeDesc(a, b);
      };
      const readFirst = (a, b) => {
        const ra = (a.dataset.read === 'true') ? 0 : 1;
        const rb = (b.dataset.read === 'true') ? 0 : 1;
        return ra - rb || byTimeDesc(a, b);
      };

      let sorter = byTimeDesc; // default newest
      if (value === 'oldest') sorter = byTimeAsc;
      if (value === 'unread') sorter = unreadFirst;
      if (value === 'read')   sorter = readFirst;

      if (value === 'unread_only') sorter = byTimeDesc;


      visible.sort(sorter).forEach(el => list.appendChild(el));
    }

    select.addEventListener('change', sortAndFilter);

    sortAndFilter();
  })();
</script>
